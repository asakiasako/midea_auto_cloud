DOMAIN = "midea_auto_cloud"
STORAGE_PATH = f".storage/{DOMAIN}/lua"
CONFIG_PATH = f".storage/{DOMAIN}/config"
DEVICES = "DEVICES"
CONF_REFRESH_INTERVAL = "refresh_interval"
CONF_ACCOUNT = "account"
CONF_PASSWORD = "password"
CONF_SERVER = "server"
CONF_HOME = "home"
CONF_KEY = "key"
CONF_SN  = "sn"
CONF_SN8 = "sn8"
CONF_MODEL_NUMBER = "model_number"
CONF_LUA_FILE = "lua_file"
CJSON_LUA = ""
BIT_LUA = ""
CONF_SERVERS = {
    1: "MSmartHome",
    2: "美的美居",
}